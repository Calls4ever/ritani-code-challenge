{"version":3,"sources":["components/FollowerList.js","components/UserPage.js","components/Loading.js","components/NoUserFound.js","components/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["FollowerList","props","className","onClick","fetchUser","user","login","src","avatar_url","name","toUpperCase","toLowerCase","UserPage","theme","alt","href","html_url","location","public_repos","followers","length","Date","created_at","toLocaleDateString","bio","map","f","id","moreFollowers","fetchFollower","Loading","size","color","NoUserFound","HomePage","useState","lightTheme","setLightTheme","searchKey","setSearchKey","notFound","setNotFound","loading","setLoading","followersPage","currentUser","setCurrentUser","document","body","style","backgroundColor","keyword","a","fetch","then","res","json","catch","error","console","log","message","data","window","alert","onSubmit","e","preventDefault","placeholder","onChange","target","value","trim","onFocus","onBlur","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.569ae775.chunk.js","sourcesContent":["const FollowerList = props =>{\n\n    return(\n        //the outer div holds follower details like avatar, name, and username\n        //Only interesting thing happening here is that, when user clicks the \n        //follower, it will display follower details by calling fetchUser function\n        <div className = \"follower-container\"\n        onClick={()=>props.fetchUser(props.user.login)}\n        >\n            <img \n            className = 'follower-avatar'\n            src={props.user.avatar_url}/>\n            <h2>{props.user.name?props.user.name.toUpperCase():props.user.login.toUpperCase()}</h2>\n            <h3>@{props.user.login.toLowerCase()}</h3>\n        </div>\n    )\n}\nexport default FollowerList","import FollowerList from './FollowerList'\n\nconst UserPage = (props)=>{\n    //fetches more followers if exist when clicking on the load more button\n    const handleLoadMoreClick=()=>{\n        props.fetchFollower(props.user.user)\n    }\n    //There are few divs, many of them structured in this way for styling purposes\n    //The div with class name of 'user-container' holds all the element in this component\n    //There are three main parts, the div containing user details, follower list (<ul/>) and conditional render of load more button\n    //The user details div divided into one <section>, one <h1/> and one <p/>\n    //The section in the user detail contains user details like nam, username etc..\n    return(\n        <div className = 'user-container'>\n            <div className ={props.theme?'user-details-div':'user-details-div-dark'}>\n               <section className = 'user-details-section'>\n                   <img \n                   src = {props.user.user.avatar_url}\n                   alt=\"user's profile\"\n                   className = 'user-avatar'\n                   />\n                   <div className='user-name-div'> \n                       <h1>\n                           {props.user.user.name\n                            ?props.user.user.name.toUpperCase()\n                            :props.user.user.login.toUpperCase()}\n                       </h1>\n                       <h2>\n                           <a className ='user-link-github' href={props.user.user.html_url}> @{props.user.user.login.toLowerCase()}</a>\n                        </h2>\n                        <h3>Lives in: {props.user.user.location} </h3>\n                        <h3>Public Repos: {props.user.user.public_repos} </h3>\n                        <h3>Rendered Followers: {props.user.followers.length} </h3>\n                        <h3 > Pushing commits since: \n                        {new Date(props.user.user.created_at).toLocaleDateString()}</h3>\n                   </div>\n                   \n                </section>\n                <h1>Bio</h1>\n                <p className = 'user-bio'>{props.user.user.bio}</p>\n            </div>\n            <h3>Followers</h3>\n            <ul className ='follower-list'>\n                {props.user.followers.map(f=><li><FollowerList key ={f.id} user = {f} fetchUser = {props.fetchUser}/></li>)}\n            </ul>\n            \n            {props.user.moreFollowers && \n                <button\n                className = {props.theme?'load-more-button':'load-more-button dark'}\n                onClick={handleLoadMoreClick}\n                >\n                    Load More\n                </button>}\n            \n        </div>\n    )\n}\nexport default UserPage","import {VscLoading} from 'react-icons/vsc'\n//loading icon imported from react-icon\nconst Loading =props =>{\n    //the icon changes it's color based on the theme user is using\n    return(\n        <div className = 'loading-div'>\n            <div className='loading'>\n            <VscLoading\n            size ={75}\n            color={props.theme?'black':'white'}\n            />\n            </div>\n        </div>\n        \n    )\n}\nexport default Loading","const NoUserFound = props=>{\n    //just a very plain 404 landing page even if we don't know the reason for failing is actually 404 LOL\n    return(\n        <div className = 'not-found-div'>\n            <h1 className = 'four-o-four'>404</h1>\n            <h1 className = 'user-not-found'>The user you are looking for is not found</h1>\n            <h1 className = 'search-another'>Try searching something like calls4ever!</h1>\n        </div>\n    )\n}\nexport default NoUserFound","//importing icons for dark and light mode\nimport {BsMoon} from 'react-icons/bs'\nimport {BsSun} from 'react-icons/bs'\n//Components being imported\nimport UserPage from './UserPage'\nimport Loading from './Loading'\nimport NoUserFound from './NoUserFound'\nimport {useState} from 'react'\n\nconst HomePage=(props)=> {\n  //States\n  //there are 5 states in this components\n  //lightThem - Tracks what theme (light & dark) user is on\n  //searchKey - Tracks user's input\n  //notFound -  Decides when to render NoUserFound component\n  //loading - Decides when to rending Loading Component\n  //currentUser - Stores current user's info\n  const [lightTheme, setLightTheme]=useState(true)\n  const [searchKey, setSearchKey]=useState('')\n  const [notFound, setNotFound] =useState(false)\n  const [loading, setLoading] = useState(false)\n  const [currentUser, setCurrentUser] = useState({\n    user: null,\n    followers: [],\n    followersPage: 1,\n    moreFollowers: true\n})\n\n    \n//Rendering theme\n  if(lightTheme){\n    document.body.style.backgroundColor=\"white\"\n    document.body.style.color='black'\n  }else{\n    document.body.style.backgroundColor=\"black\"\n    document.body.style.color='white'\n  }\n\n  //Handle change function to track what is being type in the search box\n  const handleChange = e =>{\n     setSearchKey(e.target.value.trim())\n  }\n  //on submitting the search query, couple key things expected to happen\n  // 1. Sets current user if any to null \n  // 2. Starts loading\n  // 3. Fetches user from API\n  // 4. Empties the search box\n\n  const handleSubmit = e =>{\n      e.preventDefault()\n      setCurrentUser({\n        user: null,\n        followers: [],\n        followersPage: 1,\n        moreFollowers: true\n    })\n      setLoading(true)\n      fetchUser(searchKey)\n      setSearchKey(\"\")\n  }\n\n  //FetchUser\n  //it is an sync function that fetches user from the API\n  //it should do following key things\n  //1. fetches user with given username\n  //2. if there is user, then start fetching user's followers\n  //3. if not, the resets NotFound to true\n  const  fetchUser = async (keyword) =>{\n    \n    let user = await fetch(`https://api.github.com/users/${keyword}`)\n                    .then(res=>res.json())\n                    .catch(error => console.log(error))\n    if(user.message){\n        setNotFound(true)\n        setLoading(false)\n        setCurrentUser({\n            user: null,\n            followers: [],\n            followersPage: 1,\n            moreFollowers: true\n        })\n    }else{\n        fetchFollower(user)\n    }\n    \n  }\n\n//adjusting the length (width) of the search input when it is on focus or out of focus\nconst handleOnFocus=e=>{\n    e.target.style='width: 450px;'\n}\nconst handleOnBlur=e=>{\n    e.target.style='width: 320px;'\n}\n\n//fetchFollowers\n//it is an async function that fetches followers of given user from API\n//Following key things expected to do\n//1. Check if the user it is given matches user in the currentUser\n//2. if yes, copies all the info from currentUser to a variable (data)\n//3. if not, sets the value of data to initial (default) current user's values\n//4. gets followers from the api using correct page number stored in data\n//5. Check if there is more followers left to get\n//6. if yes, increment the page number for future uses\n//7. if not, set morePage property to false\n//8. at the end, it updates loading, currentUser, and notFound\nconst fetchFollower =async (user)=>{\n    let data={}\n    if(currentUser.user && user.login==currentUser.user.login){\n        data=currentUser\n    }else{\n       data = {\n            user,\n            followers: [],\n            followersPage: 1,\n            moreFollowers: true\n        }\n    }\n    let followers = await fetch(`https://api.github.com/users/${user.login}/followers?page=${data.followersPage}`)\n                        .then(res=>res.json())\n                        .catch(error=>window.alert(error))\n        if(followers.length<30){\n            data={\n                ...data, \n                moreFollowers: false,\n                followers: [...data.followers, ...followers]\n            }\n        }else{\n            data={\n                ...data,\n                followers: [...data.followers, ...followers],\n                followersPage: data.followersPage+1\n            }\n        }\n        setLoading(false)\n        setCurrentUser(data)\n        setNotFound(false)\n}\n//Here renders the components we wanted to see\n//first div is wrapper div of all other JSX\n//div with class 'dark-mode-toggle-div' holds both of the icons for dark and light mode\n//then comes form with search input box\n//then conditionally renders NoUserFound, Loading and UserPage components\n  return (\n    <div>\n      <div className='dark-mode-toggle-div'>\n        <button \n        className = 'theme-mode-button'\n        onClick={()=>setLightTheme(true)}\n        >\n          <BsSun \n            size ={35}\n            color = \"white\"\n            />\n        </button>\n        <button \n          className = \"theme-mode-button\"\n          onClick = {()=>setLightTheme(false)}\n        >\n          <BsMoon \n            size={35}\n            color=\"black\"\n            />\n            \n        </button>\n      </div>\n      <div className={lightTheme?'search-input-div':'search-input-div dark'}>\n        <form \n        onSubmit={handleSubmit}\n        >\n          <input \n          className = {lightTheme?'search-input':'search-input dark'}\n          placeholder= 'search GitHub users'\n          onChange={handleChange}\n          value={searchKey}\n          onFocus={handleOnFocus}\n          onBlur={handleOnBlur}\n          />\n        </form>\n        {notFound && <NoUserFound/>}\n        {loading && <Loading\n        theme={lightTheme}\n        />}\n        {currentUser.user && <UserPage \n        fetchUser = {fetchUser}\n        user = {currentUser}\n        theme ={lightTheme}\n        loading={loading}\n        fetchFollower ={fetchFollower}\n        />}\n      </div>\n    </div>\n  );\n}\nexport default HomePage","import './App.css';\nimport HomePage from './components/HomePage';\n//This app consist of 5 components \n// HomePge-a container for all other components\n//UserPage - Renders User details and FollowerList Component\n//FollowerList - renders details of each follower\n//Loading - displays the loading animation while the data is being loaded from the api\n//NoUserFound - displays no user found only when there were no user with given username\n\n//Used React icons\n//Used React hooks\n\n\nfunction App() {\n  return (\n    <div>\n      <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}